digraph G{

    /* sollte wieder mit flatten compiled werden, damit dass etwas besser aussieht */
    /* ToDo: sinnvolle Attribute und Funktionen fÃ¼r die Views */
    /* Popup sollten abstrakt sein! --> einzelnen abstracts erben einfach nur davon */
    /* wie wird das HUD dargestellt? */

    fontname = "Bitstream Vera Sans"
    fontsize = 8

    node [
        fontname = "Bitstream Vera Sans"
        fontsize = 8
        shape = "record"
    ]

    edge [
        fontname = "Bitstream Vera Sans"
        fontsize = 8
        arrowhead = "onormal"
        labeldistance = 1.5
    ]


    View [
        label = "{View|
            - properties : ViewProperties\l
            | + handleView() : void\l
            + handleEvent() : void\l 
            }"
    ]

    MainMenuView [
        label = "{MainMenuView|
            - popupSettings : Popup\l
            - popupHelp : Popup\l
            - popupConnectionError : Popup\l
            - buttonPlay : Button\l
            - buttonSettings : Button\l
            - buttonHelp : Button\l
            - buttonEndGame : Button\l
            
            |
            + handleView() : void}"
    ]

    SettingsView [
        label = "{SettingsView|
        - sliderAudioBackground : FloatSlider\l
        - sliderAudioEffect : FloatSlider\l
        - buttonReturnToMain : Button\l
        - buttonReturnToMain : Button\l
        |
        + handleView() : void}"
    ]

    LobbyView [
        label = "{LobbyView|
            - popupChangeName : Popup\l
            - popupLobbySettings : Popup\l
            - popupChangeRole : Popup\l
            - popupShowConfig : Popup\l
            - buttonChangeName : Button\l
            - buttonLobbySettings : Button\l
            - buttonShowConfig : Button\l
            - buttonChangeRole : Button\l
            |
            + handleView() : void}"
    ]

    SelectionPhaseView [
        label = "{SelectionPhaseView||+ handleView() : void}"
    ]

    EquipmentPhaseView [
        label = "{EquipmentPhaseView||+ handleView() : void}"
    ]

    GameView [
        label = "{GameView|
            - popupOptions : Popup\l 
            |
            + handleView() : void\l
            - drawField() : void\l
            - drawObjects() : void\l
            - animateAction() : void\l
        }"
    ]

    GameOverView [
        label = "{GameOverView|
        - returnToMain : Button\l
        - showStatistics : Button\l
        - popupStatistics : Popup\l
        - labelWinner : Label\l
        |+ handleView() : void}"
    ]

    Popup [
        label = "{Popup|
            - text : string\l
            - buttonList : Button[]\l
            |
            + setString(string) : void\l
            + setPosition(vec2) : void\l
            }"
    ]
        
    Component [
        label = "{Component|
            - position : vec2\l
            |
            
        }"
    ]

    Button [
        label = "{Button||}"
    ]

    TextField [
        label = "{TextField|
        - text : string\l
        |
        + getText() : string\l
        + setText(text) : void\l
    }"
    ]
    
    Label [
        label = "{Label|
        - text : string\l
        |
        + setText(string) : void\l
        + getText() : string\l
        }"
    ]

    FloatSlider [
        label = "{FloatSlider|
        - minVal : float\l
        - maxVal : float\l
        - stepSize : float\l
        |
        + getValue() : float\l
    }"
    ]
    
    ViewProperties [
        label = "{ViewProperties|
            + width : int\l
            + height : int\l
            |
        }"
    ]
    
    

    edge [
        arrowhead = none
    ]
    ViewProperties -> View

    //Aggregations
    edge [
        arrowhead = "odiamond"
    ]

    //Compositions
    edge [
        arrowhead = "diamond"
        dir = "back"
        arrowtail = "empty"
    ]

    View -> MainMenuView
    View -> LobbyView
    View -> GameOverView
    View -> GameView
    View -> SettingsView
    View -> EquipmentPhaseView
    View -> SelectionPhaseView

    Component -> Button
    Component -> TextField
    Component -> FloatSlider
    //Normal arrows
    edge [
        arrowhead = "vee"
    ]
}
